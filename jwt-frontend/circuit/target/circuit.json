{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":1505008870961362169,"abi":{"parameters":[{"name":"data","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":512,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"base64_decode_offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey_modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"redc_params_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5634341720269277520":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]},"5675127253506927136":{"error_kind":"string","string":"utils::search could not find needle in haystack"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6314603625877298116":{"error_kind":"string","string":"haystack length of size 0 not supported"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6543056410826478903":{"error_kind":"string","string":"incorrect value for claim"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7788270038095378938":{"error_kind":"string","string":"substring not present in main text (match found if a padding text included. is main text correctly formatted?)"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15412340888643424233":{"error_kind":"string","string":"needle length of size 0 not supported"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18261670735869299181":{"error_kind":"string","string":"data length is too long"}}},"bytecode":"","debug_symbols":"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2pXYa1dir12JSbsSk3YlJu1KTNqVeH1LFmkC2pWYtCsxaVdi0q7EpF2Jg3YlDtqVOGhX4qBdide3ZJEmoF2Jg3YlDtqVOGhX4qBdiaN2JY7alThqV+KoXYnX91WSJqBdiaN2JY7alThqV+KoXYmTdiWG77HFEtCuxPg9tjgC2pUYv8cWR0C7EuP32OIIaFdi7T22vPYeW157jy2vvceW195jy2vvseW199jy2ntsee09trz2Hltee48tr73HltfeY8tr77HltffY8tp7bHntPba89h5bXnuPLa+9x5bX3mPLa++x5bX32PLae2x57T22vPYeW157jy2vvceW195jy2vvseW199jy2ntsee09trz2Hltee48tr73HltfeY8tr77HltffY8tp7bHntPbZIe48t0t5ji7T32CLtPbbIKVdi0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48t0t5ji7T32CLtPbZIe48tgu8vFCndCcRMHQLo70BO+U4gl9QhAPUO/AUJq1/NDRJUxniDBJUD3iBBZXU3SBEP0vqYl+r9367ZOyZkpBrK719vf9bXkHFAJxdhAkU7gaqdQNNNIBzQyUWYgNdOgLQTCNoJRO0ElCtxcMqVODjlShycciUOTrsSe+1K7LUrsYfXgRruBJqjDgH0KNR83QlQ6RCAikI3SFBx5S9IBBUpbpDWv/ul7OWJUnuQCA9SwIMU8SAlPEgZD1LBg1TxIDU4SAd0J2Ah4UXvgBe9A170DnjRO+BF74AXvQNe9D7grHatdIe0LW06kJbPpeb9/Tt589Tz0nKNa8ndl60txdSBtFzjWiZ3h5TzV0i9f7vdZ14ozr2u+tafTZQm4LUTIO0EgnYCUTuB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PEgRD1LCg5TxIBU8SBUPUoODFPCid8CL3gEvege86B3wonfAi94BL3oHvOgd8KJ3wIveES96R7zoHfGid8SL3hEveke86B3xonfEi94RL3pHvOid8KJ3woveCS96J7zonfCid8KL3gkveie86J3wonfCi94ZL3pnvOid8aJ3xoveGS96Z7zonfGid8aL3hkveme86F3wonfBi94FL3oXvOhd8KJ3wYveBS96F7zoXfCid8GL3hUvele86F3xonfFi94VL3pXvOhd8aJ3xYveFS96V7zo3fCid8OL3g0veje86N3wonfDi94NL3o3vOjd8KJ3g4ve2cFF7+zgond2cNE7O7jonR1c9M4OLnpnBxe9s4OL3tnBRe/s8KK3x4veHi96e7zo7fGit8eL3h4venu86O3xorfHi94eL3rjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31jLjnbXMeGctM95Zy4x31rLgnbUseGctC95Zy4J31rI4uOhd8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5aFryzlgXvrGXBO2tZ8M5algPOx0VKd0gxUwfS+rmUU75DyiW9Qvrpk183I36FEVphJKwwElcYSSuMSLyDqd5/XbN3zIRPNZTfv97+rJ0JX/AgVTxIDQ6SyCknYUgeDxLhQQp4kCIepIQHCS96Z7zonfGid8aL3gUvehe86F3wonc5IC7VcIfUXGcZVda/cc3XHRKVDqQffuP+MlLdCiN+hRGJeb45/W5kc03HSFhhJK4wklYYySuMlBVG6gojbYERkfMJrBG/wsiKN76teOPbije+rXjj24o3vq1449uCN76K7O2ule5GtjSnY0TgmTTv73Xo5qnHRCB2teTuiWNLMb0akdjf2TK5u5GcE5OlhdzuTzAU516ytCqxv1MaEuFBCniQIh6khAcp40EqeJAqHqQGB4nwojfhRW/Ci96EF70JL3oTXvQmvOhNeNGb8KI34UXvsD4ulRh2SM9bAXZI69+4bUV3/7db10s//MbdjJQVRuoKIxLzvIT7fqRWkv/uPJfYCScNyeNBIjxIAQ9SxIOU8CBlPEgFD1LFg4QXvRNe9E540TvhRe+EF70TXvROeNE74UXvhBe9E170zuvjEregy+vfOG5Bl3/4jbsZySuMlBVGROb5vtWnbV+OmCe4Pan7l8ntz9x5gg0OUnF4kDweJMKDFPAgRTxICQ9SxoNU8CDhRe+CF70rXvSueNG74kXvihe9K170rnjRu+JF74oXvev66L0tbO+QtkS7A6nBQWoOD9L6N277F++QAsUOpPVzKbb7t0KfXOpA+uG59MtIc26FEb/CCK0wElYYiSuMSLyDzd/fqtZC5ia8826f8c7713pYE9m5LQ6qIIKqiKAaICiRPfTioDwiqOVvX6b9AEQmog6kth5SrDuk0vESOTxIHg8S4UEK6yG1+7+dg+tBiniQEh6kjAep4EGqeJAaHKSwPnqHh8aFnsYFjweJ8CAFPEgRD1LCg5TxIB0bvXuQ4gFxqe75UvS1A8njQSI8SBEPkkAQ2BaLKe7LRVe4fUU55TuFnErrgMqIoAogqLQ+FKREO6ScOpA8HiTCgxQOhdSdSxkuOuUf9tLNiEhU3rdKbu+1iwxx7nNlE9lZKY0pA2IqgJgqIKaGh0lko6c0Jg+IiQAxBUBMgHG8AMbxAhjHC2AcL4BxvADG8QoYxytgHK+AcbwCxvF6QBxndqG1mgAxZUBMB8QnZrteawe8d8x+vdZ++r27WYlLrKQlVvISKzJFPv9U5GOrIFuicf/59mdvslREUA0OVHASO1T/GFR9dH+tVDugPCIoQgQVDgYVqAMqIoJKiKAyIqgjInpNe2uvmloHVEUEdUREf/Tn3nLH8ArKHxLRy2NOtdgB5RFBESKogAjqiIje3J66NF86oBIiqIwIqiCCqoigGiAocoigPCKoQ+JU3JvYtOw7oH58ot/MyEzdP9ptwx57CS44TFgeExZhwgqYsCImrCP2vb0/6xVcdEeAentoaAPlEUERIqiACCoeAertGZQNVEIElRFBFURQFRFUAwSVHCKoIyL6+xMpGyhCBBUQQUVEUAkRVEYEVRBBHR3Re6DyIXHq7eb9DRQhggqIoBIiqCMm+vtjMxuoBgiqOERQ/mBQpfOJUWKLtvhELz8+p/4yU0Vmiff0KNeExnBn9lpuoDwiKEIEFRBBRURQCRFURgRVEEFVRFANEFRDjOgNMaI3xIjeECN6Q4zoDTGiN8SI3hAjekOM6A0wont3RER/f6ZmA+URQREiqCPi1PvjRxuoI96+9+ePNlA//vb9Zca7NWb8GjO0xoxMXhLbwwxbJOFO1niZPbPSoBIiqHwAKOZkjZfZMysNqiKCageD6hxi8TJ7ZqVBeURQhAjqiIjOHPfxFBFBHRHRmTNIng6J6O8PsXgqiKAqIqgGCCocEdGZAwc+eERQhAgqIIKKiKASIqiMCKoAgoqHxKn3Z5B8/PGJfjMjM3Xrwwy5b1+9s8HKmLAKJqyKCatBwpLZhS0PK6yHxZ1B8ikfAer9IRafCiKoigiqAYLK7ghQ709BeJndxdKgCBFUQAQVEUElRFAZEdQREZ05BeFzRQTVAEEVhwjKI4IiRFABEdTREb0L6pA49X5vvy8VEVQDBFU9IqgjJjpzssbXhAgqI4IqB4PqnEHyzQFO9Pbjc+pmRmSWUHx0UaYSGe7spkuZPbPSoCoiqIYHimT2zEqD8oigCBFUQAQVEUElRFCAEZ0cYEQnBxjRySFGdI8Y0T1iRPeIEd0jRnSPGNE9YkT3R0R05mQN+YIIqgKCoiPiFHMGieiIt485g0T042/fzUxeY6asMVPXmJHJS+qjJ0pgiyTcyRqS2TMrDcojgqIDQDEna0hmz6w0qIgIKh0MqnOIhWT2zEqDKoigKiKoIyI6c9yHokMEdUREZ84gUTwkor8/xEIxIIKKiKASIqgjIjpz4IBiQQRVEUE1QFDJIYLyiKAIEVRABHVInHp/Bonyj0/0mxmRqRuif5jJleH+q4fF/V/3vQcis/daGlRABBURQSVEUBkRVEEEVRFBNUBQMnuvpUEhRvSCGNELYkQviBG9IEb0ghjRC2JEr4fEqf07dOh+h65HvH3k93+dyHVA/fjbdzOT1pjJa8yUNWZk8pL2WBHF53Mmk69WAwQlswVdGpRHBEWIoAIiqIgIKiGCyoigCiIoxIjeACN6cIARPTjAiB4cYEQPDjCiBwcY0YM7JE69X6oEf8TbxyxVgv/xt+9mhtaYCWvM/PGcvw1Lc8Py3LAyN6zODWtTw/68ZfRtmJ8bRnPDwtywuVlCc7Okv4H4V1vgPShR6Qwrc8Pq3LA2Nay/pZYf5ueG0dywMDcszg1Lc8PmZkmYmyVhbpaEuVkSB7Nkv8niV+tgJvj/Uu5dL58zi/rbhl9ggxbYSN+34evjkEltj/3d+beJKmCi+f10RovuxUT7UxN/DUtubpifGzZ4wR/x3CfqDOu/cmHvG7H9GTrD6tywvifrfjhm+7PDrb+9ZPvtngm3L9tF7sP83DCaGxbmhvWf22NGhkY9l6S5YXluWOG5cQlvC49zGtE9xYrWCyzZ7f90fm6CWv8sCnXe9S29fpw5dK0+A7mRrSzZ3guYB3O7lMfc7ryAxc0N83PDaG5YmBsW54aluWF5bliZG1bnhs3Nkjo3S+rcLKlzs6TOzZI6N0vq3Cypc7Okzs2SOjdL6twsaXOzpM3NkjY3S9rcLGlzs6TNzZI2N0va3Cxpc7OkTc2S6NzcMD83jOaGhblhcW5YmhuW54aVuWF1btjcLPFzs8TPzRI/N0v83Czxc7PEz80SPzdL/Nws8XOzxM/NEpqbJTQ3S2hultDcLKG5WUJzs4TmZgnNzRKamyU0N0vC3CwJc7MkzM2SMDdLwtwsCXOzJMzNkjA3S8LcLAlzsyTOzZI4N0vi3CyJc7Mkzs2SODdL4tws6Z823ST9PmwTzt6w2h+2nxnbpCx3hrWpYf2q6heQpXSG+cGwh7XmOsNobliYGxbnhqWpYf2q6ibp9/ZJm0zXzrA+t5Lv1b3YOp9NYr88xlrrl8e2qXovxm3TrzNL+uUxfhjNDQtzw+LcsDQ3LM8NK3PDKjusdWZJvzzGWqtzs6TOzZI6N0vq3Cypc7Okzs2SOjdL6twsqXVu2NwsaXOzpM3Nkn55bAuf9w9yMffUtF8e2367B/OcOi9OvzzGD0tzw/LcsDI3rM4NazPDUr88xg/rz5JcdlnMpXWG0dywMDcszg0bzJL8mMrVdYbluWFlblidG9amhnk3N8zPDSN22NPOiMcwPpa03BkW+cj11Zrer73JJ45scT0f9ed2eeTcpfOROPWLevywOjesTQ3rF/X4YX5uGM0NC3PD4tywNDdsbpbQ3CyhwSwp9+tWtjw5dIb1Z0nd793aMteO4AXHWgu1M6w/S2p6DCs9azQ3LMwNi3PD0tywPDeszA2r7LBOcSiFxj7u1plc0c1UC1L0c8P6ZTZ6bG+izvamNCizscPy3LAyN6zODWtTwwabF9lhg93J5XFmpVPUS2mwX7g9TpX0RHiwnZCzNthOSO7BzXWyqcF2QnYYzQ0Lc8PilCcH2wnZYXPPbbCdkB1W54a1qWGDjXnssMEsobgPC7EzjOaGhblhcW5YmhuW54aVuWF8nOwO42dJb1idmyWDjXnsMJobFuaGzcWSOhdL6lwsqXOxpM7FkjoXS9rcLGlzs6TNzZL244c10mBb3R8e1qDHYY2nJPBuovy8ifrzJtpPm8jO/bwJ//Mm6OdNBAkTez1p+7O9mIg/byL9vIn88ybKz5uoP2+i/bgJL/12h+djca+/Lfuaq9T6AkYkDrw7o5c9/byJ8PMmDunG876hRPZHdLmg8JR390BVRFANENSf9z5YAcojgiJEUAERVEQEdUR/NaLwAFU6oDIiqIIIqiKCaoCggkME5RFB0cGgYidOhUMi+v5571cj/w6oiAgqIYLKiKAOiejpUVLPtQOqIoJqgKCiQwTlEUERIqiACCoeDKp04lRMB4NqrgPq6By9+Q6oQyL6+zaeOVZEUA0QVHKIoDwiKEIEFRBBRURQCRFURgSFGNETYkRPiBH9mHsemW8zh9zzyBViD7nnkQWVEEFlRFAFEVRFBNUAQR1yzyML6oh7Hrnq8CH3PLKgAiKoiAgqIYLKiKAKIqh6MKjet5lySERnivuH3IjJgvKIoAgR1CERnakO14gIKiGCyoigCiKoigiqAYJq7mBQvW8zzR8Mqvdtph2do/e+zbRDIjpTn2oREVRCBJURQRVEUBURVMMDVZxDBOURQREiKMCIXhxgRC8OMKIXJxKnqD4+GIUvJ2R7oFrb22i1ln0HVDsC1P7ByDvnXlPPInM9rDgqD4mKIFEFSFQRElWCRJUhUZWjUfncQVUhUR0e23uo6PDY3kV1QGzfoIT6gBVLBxZhwgqHwCqP37uaOrDiIbByeYLVm1sJE1bGhFUwYdUjYPm9k9r293PT2R1Wg4QVHCYsjwmLMGEFTFgRE1bChJUxYRVMWJhRPmBG+YgZ5WVOulF8ZARUIgcr7N8Ifcid6p/MSTdpUAkRVEYEVRBBVURQDRCUzEk3aVD+YFCFOqAIEdTREb0L6uiI3gV1SEQveQdVWwdURgRVEEFVRFANEFR2iKA8IqhDInps70EdEtHjXtcOrVPWzkdE9Ej31pw+Pjdv30GlQ0DtWx9i6mwbyBkRVEEEVRFBtYNB5c5ELw4RlEcERYigwsGgSuerTYmIoI6O6F1QR0f0LqijI3oX1CERve3rvuQ6n75LAwRVHSIojwiKEEEFRFAREVRCBJURQRVEUIgRvSJG9IYY0RtiRJc56eZre4Biv41m2m/PyoE61WGZ81v+UdtxvngGFHsEQeb81p+C4jYayxzgEkZVZU5wiaPykKgIElWARBUhUSVIVPloVJ0N7NUVSFSHx/YuqsNjew+VPyC283v9q/eYsOgQWMwRhOrDIbCY3evVR0xYCRNWxoRVjoDFbbesvmLCapCwyGHC8piwCBNWwIQVMWElTFgZExZmlCfMKE+YUV7mRNfj1t7t79A4WMx+4ypznksaVEQElRBBZURQBRFURQTVAEHJnOD6BqjOHvYqc6ebNKijI3oX1NERvQvqkIj+fhN0jQkRVEYEVRBBVURQDRBUcoigDono748g1HRIRH9/BKGmIyI6cwShpngIqLd72GtKiKAyIqiCCKoeDCr3JnoDBJUdIiiPCIoOBtXZLl5zQAR1dETvgjo6ondBHR3Ru6AOiejvdzzWXBFBNUBQxSGC8oigCBFUQAQVEUElRFAZERRiRC+IEb0gRvSKGNFlzm+59LTljf02yh1BqDKnkrYvtg9Q4bu3IFSZU0l/CorbaCxzLEkcVUNEJXMwSRyVh0RFkKgCJKoIiSodjaq3gb1lSFSHx/YuqsNjexfVAbGd3+vfnMOE5Q+BxRxBaI4OgcXsXm8uYMKKmLASJqx8BCxuu2VzBRNWxYTVIGF5hwnLY8IiTFgBE1bEhJUwYWFGeY8Z5T1mlJc40dVaeUoIHNsUhdlu3CSOc4ljCoCYIiCmBIgpA2IqgJgqIKZ2LKbO1vUmcW2ZOCYPiIkAMR0Rx9/ve24hAmJKgJgyIKYCiKkCYmp4mOIRcfz9cYMWj4jj708btHhAHGcOG7QYjsD0drN6ixEQUwLElAExlWMx5d4cr4CYGh6m5AAx+WMxdfaDt0SAmAIgpgiIKQFiOiKOv9/N2FIBxFQBMTU8TNkBYvKAmAgQUwDEFAExJUBMgHE8A8bxDBjHM2AcLyLxyd8LJa2xHzq58wRN4ohRK/X+61afv6XOfdmQOGAkDangQap4kBocJImDRdKQPB4kwoMUDoXU+0ImcXWWNKSEBynjQTogejNfWGrFg9TgIDWHB8njQSI8SAEP0gHRm/mk2Q6I3swXzbY+enMfNFs5ANL7b2Kt4kFqYJCicw4Pkj8U0uv3sA0S4UEKeJAiHqR0KKTX704bpIwHqeBBqniQGhwkf0D0fls+3SB5PEiEByngQYp4kBIepIwHqeBBqniQGhwkwovehBe9CS96E170FjklVsLeQqwkrgvar2v+7v92pU7uLXJITBhSxYPU4CCJnBAThuTxIBEepLAcUmnxAelrXHr9NeV6LyNScc8fFGvv10T3jR1EIX359Y1uvBbddC26+Vx00/5rKj265Vp067XotkvRje5cdNv9GyEF7zt0/cnoxgdd6tClk9ENO92eEMWTZVVt/3WIoUM3XovuybIqji5UVnWDdECdYNevXzeHdSBVPEgNDlJyeJA8HiTCgxTwIEU8SOuVoYb2gFQ7kDIepIIHqeJBanCQssOD5PEgER6kgAcp4kHCi975gOjdHl8MWutAKniQKh6kBgepHBC993O2v26r6EDyeJAID1LAgxTxICU8SBkPUsGDVPEgNThIFS96V7zoXfGit8hZ3rxv42g5JxYSs+lD5CyvMKSCB6niQWpwkETO8gpD8niQaDmkIzfiiJwTVkQ3XotuOhddZmdKy9eiW65Ft16LbjsX3ffbrLxzJ6P7dpuVd/5kdN9us/LuZFnV+4043p0sq+LoxmvRhcqqbpAOqBO832HhXcGDVPEgNThI3uFB8niQCA9SwIO0XhmYD/XeJzxIGQ9SwYNU8SA1OEjk8CB5PEiEByngQcKL3nRA9H6/W8dTxoNU8CBVPEgHRO/3n6B9cHiQPB4kwoMU8CBFPEgJD1LGg1TwIFU8SHjRO+JF74gXvUXOIG/L+DukbcnzBdLNiESk8eVedW3kasdIXmGkrDBSVxhpC4yInFtljfgVRiSynG36PIw05tX1qeyd4FP9+p3kBingQYrLIWV3/7d99qUDKR0Aae8gmEPn67rI2dI/hJT2iw5yzh1IBQ9SxYPUDoC0X7mXe2+cyNlSYUgeDxLhQQoHQNrvhMmtB2l99C6P205K7ETvvD56F1feQ1ofvUtOO6TaEZRcDoB0z5d8dbEDSSJ60+NuT0rhNSkTOS3KGRE5/8ka8SuM0AojYYWRuMJIWmEkrzBSVhhZ8caXFW+8yJnBWO65ZIu1Z8SvMEIrjIQVRqKwkeY7RiTek7TnDy3F1DFSVxhpC4yInGFjjfgVRmiFkbDCSBQ2kjrvichJJpZJXmFkxRvfVrzxbcEbT86tMOJXGKEVRsIKI3GFkbTCSF5hZMHLSBJbpGvbjdTmc8cIrTASVhiJK4xITGG3f21ozvuOkbzCSFlhpK4w0hYYEdmEyxrxK4yseE8ktivWFmg3Ul53BJDE1jqWSRCJwnuhc/uzdYzQCiNhhZG4wkhaMbvyCiNL3pO6wkhbYCS6FUb8CiMib3x5vCetdoyEFUbiCiNphZG8wkhZYaSuMNJEjfSzlST7xg+MrHjjE60wElYYiSuMrND4tELj0wqNTys0Pq3Q+LxC4/OKNz6veOPzijdeYrtKTfsNyjX7r0Zef51qvfefSc09t9tpvyGV5ZC2Mt0OKbUOpIoHqcFBktgKIw3J40EiPEgBD1LEg5TWQ4p5h5RdB1LGg1TwIFU8SA0OUnV4kDweJDoWUicu1QOi9/7r1FrPSxEPUsKDlPEgHRC9y2M58LzrbodU8SA1OEjN4UHyeJAID1LAgxQPhJRd5xw6tXQoJOqUKdqRufcGKXQgHRC9fd3nEpUOpIoHqaFBCs7hQfJ4kAgPUsCDFPEgJTxIGQ8SXPQODi56B4cXvUV22m4f3e+Qti8/DKSS9q2AJXWSkyCyL1cYUsSDlPAg5eWQ4t56cYMUOpAKHqSKB6nBQZLY2SwNyeNBIjxIAQ/SAdE7pR1SiR1IB0TvUHZIqRO9KeNBKniQKh6kBgcpODxIHg8S4UEKeJAiHiS86B3WR+9t9XmHlENH48L66J1d2yHFnpfWR++cH5B6mUBocJCiw4Pk8SCtj955b/JScusUc2LAgxTxICU8SBkPUsGDVPEgtSMhFfe6pSokhwfJ40EiPEgHRO+9beqGLnUgRTxICQ9SxoNU8CBVPEgNDlJ2eJA8HiTCg4QXvTNe9M540VvifFyhR72fCn9zDT0ujKPO0lLifJwwJInzcdKQPB4kwoMU8CBFPEhpOaTS4gPS17j0+mvK9X4Wmor7esFB59dE92oxUUhffn2jm69Ft1yLbj0X3f3ud/qCZKfbLkW3umvR9deiS+ei2+6pOgXvO3TDyejGB13q0I0noxt2uj0hqifLqtr+6+1TW4fuybIqju7JsiqOLlRWdYN0QJ1g16/tz84HsebwIHk8SIQHKeBBiniQEh6kjAdpvTLU0B6QagdSxYPU0CBF5/AgeTxIhAcp4EGKeJASHqSMBwkuekd3QPRujy8GrXUgNThI3uFB8niQDoje5V6w39ZHrgMp4EGKeJASHqSMB6ngQap4kBocJHJ4kDweJLzoTXjRm/Cit8RZ3uIfZ3LIFw4S+TuBQF82fdTfkOp6SI9/m8rX72Gvv/ap3OssPlXXIdCUE5A4J/yjBPLe8sTn5397J+DhCbidQPAdAoROINWdQM4dAkE7gaidQIInUHYC3SiUtRMo2gmgKzFLAF2JH7vgNysdAhFdiQvtqUSJHSWO6Epc9itdBwTQlbjktBOonVQioitx2S9w9dV11gMSZ9XlCNwgHaCt+66ZsNnpQMp4kAoepIoHqcFBSg4PkseDRHiQAh6kiAcJL3onvOid1kfvQPeNy9uftQOp4kFqcJCyw4O0PnoHXx6QWgcS4UEKeJAiHqSEBynjQSp4kOqhkEJnaZkbHKTi8CCJxKXdSPHkv0C6GYkrjKQVRvIKI2WFkbrCSFtgROT8pqv3QtX2Z+oYEZld+5fBjVToGKkrmIg8E/d4Js+nLu9GRM4ksUb8CiO0wkhYMLtEzvawRla8JyLnb1gjZYWRusJI+3kjSeQci6c9dvlQOkb8CiO0wkhYYSSuMJJWGMkrjEjnXV0j0m9818iKN967FUb8CiO0wkhYYSSuMJJWGMkrjJQVRuoKIyveeFrxxtOKN36wW7u0uxGqX+Jq7H5leb/ZOQ1unPpDI5K7f9PgxqlDIZXlkJgtxmmwS/1nIb3dNJwG+85/FNL7TahpsJP8UEgeDxIdAOntzsk02L99KKSIBynhQcoHQHq7iTWF9dGb2ZaawvrozWw0TWF99Ga2jqboDoD0djNoij8cvW9GROLx+/01KYYVRuIKI2mFkbzCSFlhpK4w0hYYSW6FEb/CyIo3Pq1445PEG8/s50oprTCSVxgpK4xIvPHM9pqU2gIj2a0w4lcYoRVGwgojcYWRJGyks9Eo5bzCSFlgZHDjyPap4m4kN2KMbKnw/pkox/rl1zcjScBIcfs9PMW3jpEsYaTupdZSe0bKCiN1hZG2wMjgrgFhI36FEVphJEgY2Zuqb3/2jMQVRtIKI3mFkbLCSF1hpC0w0qTf+K6RFW98W/HGt7DCSFxhJK0wskLj2wqNbys0vi3Q+OzcCiN+hRFaYSSsMCLynvhHqPe1Y6SsMFJXGGkLjHiJ9ySXvaderqVjROQ9eb/Syp5WGAkrjMQVRtIKI3mFkbLCSF1hROSNf2zBLcG9GiG3wohfYYRWGAkrjMQVRpK0kdAxklcYKSuM1BVG2gIjwa0w4lcYoRVGRN748Aj1kTpG4gojaYWRvMJIWWGkrjDSpI2kVyPRrTDiVxihFUbCCiNxhZG0woi0xneNSGf1MXeMrMjqY1tgJLkVRlas49OKdXxasY5PK9bxacU6Pq1Yx6cV6/i04o1PK974vOKNzxLvSWx7eTClyPx6qxLfIW1/doqJOa6HtP96q5f6DqSEBynjQSp4kCoepAYHqTg8SH45pO3/vUPynYRVZM+aMKSAByniQUp4kDIepIIH6djo3YW0Pnp7X3dI1Ck4VYcHyeNBomMhdeZSDXiQIh6khAcp40EqeJAqHqRjc+8epHZA7l0fC/DWCZXN40EiPEgBD1LEg5TwIGU8SAUPUsWD1NAgFQcXvYuDi97FwUXv4kTi0t4Da/v46FhI7+veRWT39B9Cel+FKyJ7rYUhVTxIDQ6SyK5vYUgeDxLhQQrLITFVuCKyW10YUsKDlPEgFTxIFQ9Sg4NEx0bvLqT10Zup6BYiPEgBD1I8FlJvLiU8SBkPUsGDVPEgNThIweFBOjb37kI6IPdmagIh4EGKeJASHqSMB6ngQap4kBocpOjwIHk8SHjRO+JF74gXvUVO3Tz6eW5BhVhITN1b5IzOH0JiqnAiJ3pkIYmc/xGG5PEgER6kgAcp4kFKyyFxVTiRM1HCkAoepIoHqcFByg4PkseDdGz07kJaH725im6OeJASHqR8LKTeXCp4kCoepAYHqTg8SB4PEuFBOjb37kI6IPdmagIl4UHKeJAKHqSKB6nBQaoOD5LHg0R4kAIeJLzoXfGid8WK3tt/S79+S9QXXx/C4+bgEOhRnsqhY2tLOva7cH79Tc8/3/hvZtIaM3mNmbLGTF1jpi0x0xcdeTN+jRlaYyasMbMmCtQ1UaCuiQJ1TRSoa6JAXRMF2poo0ESmAHnar2EnH8OrmSZjJj2ZKe3vZoITcRpFv9+UTDGVVzN+jRlaYyasMSMSOinE/DCT6/ufE6V2zxupPU3L9BtTAsSUATEVQEwVEFPDw+Tdekw+Pcqr29/h8a+X36A8IihCBBUQQUVEUAkRVD0CFO1dure/nzrN/wZFh7x9lP0DVG4voGTevrRfNOYpU2Nip49uj53+KTvO3X/bubT/2+7pxqzt5zcKQT+FqJ9CgqewJQr7vx2ersTu/9zVsq/hvHsW+N6Kb3eOzy+5AGVzzcg1xVwzck0114xc08w1A9cEZ64Zucaba0auwc8CD3MNfnZ5mGuiuWbkGsuGh66xbHjoGsuGh66xbHjoGsuGR66Jlg0PXWPZ8NA18cqueZSXk391zaUVKtP9t7kza66jUDe+15Gdv/im62jJje/ZBMKnHUkvtKWz1UA4vmcrbHB8zyZdlfYvuzW8vr/5ZPGKvL/Hq+2fbq98TxavWL4ni1cs35PFqy98Y3zlG0/MN9VXvicrmbJ8T1YHZfmeTH9ZvidbD7J8T7YeJHJ1/7fpNT6Xs+VXRA++T7sXd75ny6/Ilbd8T5df1ffP93T5FcM3nm0+vz+RUM6WX3F8z5ZfcXzPll9xfFXnVzcKqlOmvyhU1VnQjYKCxObp397wvlJQkKtwFBSkHxyFqJ+CgiSBo6BA9zkKCqSco6BAnTkKCtSZodAUqDNHQb86N/3q3PSrc9Ovzk2/Ojf96tz0q3PDV+dU9t0N29/0SgFfnRkK0eGrM0sBXp2LC3uriOJqev/zEPL93w5b6vHKF17KhfnC674w33gxvvAZhTBf+PRDmC98riLMFz6xEeYLnwXJ8vXwKZMw34vlV/5i+ZW/WH4l1MJOD9+L5Vf+YvmVv1h+5S+WX/mL5Vd0sfyKLpZf4bf7FOZ7sfwKv5GoMN+L5Vf4rUSF+V4sv8Jv+inM92L5FX57TmG+F8uv8BtpCvO9WH6F3/JSmO/F8iv85pTCfC+WX+G3kRTme7H8Cr/hozDfi+VX8WL5VbxYfoXfelOY78Xyq3ix/Aq/X6ow34vlV/hNUGX54jdBFeZ7sfwKvwmqMN+L5VcpXozvxfKrdLH8Cr+przDfi+VX6WL5FX7TZmG+F8uv8Js2C/O9WH6F37RZmO/F8iv8ps3CfC+WX+E3bRbme7H8Cr9pszDfi+VX+E2bhfleLL/Cb9oszPdi+RV+02ZhvhfLr/CbNgvzvVh+hd8OWpjvxfIr/EbTwnwvll/ht7AW5nux/Aq/ObYw34vlV/htt4X5Xiy/wm/oLcz3YvkVfqtwYb4Xy6/wm5AL871YfoXf3lyY78XyK/zG6cJ8r5VfJfyW7MJ8r5VfpYv1b08X69+eXLwY32vlV+li/dvTxfq3p4v1b08X69+eLta/PV2sf3u6WP/2dLH+7eli/dvTxfq3p4v1b08X69+eLta/PV2sf3u6WP/2dLH+7eli/dvTxfq3p4v1b08X69+eLta/PV2sf3u6WP/2dLH+7eli/dvTxfq3p4v1b08X69+eLta/PV2sf3u6WP/2dLH+7eli/dvTxfq3p4v1b08X69+eLta/PV2sf3u6WP/2dLH+7eli/dvTxfq3p4v1b0/4/YGpUN7/7RLKKwX8R1Zy2h9Z+fWbv1PAz3I5Cgoat7IU8LWs1Me7X319pYD+LpDLJd5/7XJrrxTQ3wVyhfZfu5Li+5+nEn7/OD2x9e3GFr4fnyxb9NWeLFv0tZ4sW/SVnixb9HUAueofgbaG10AL35prg52eKOT0QgG+2xa59vQUWvDvf56b879/nZsvz7Pu9ceV4v2frhvslykK35rrUOfgx+YDnYMfyg90TjTnjJ2DvoQ61Dn4OcOBzkEvNB7pHPiuSOQd3eluf8fXVA2+Ec7245R3CrHQKwX495enAP+W8RTgS1w8BfiVF0chw/eJ+YAC/PqIp4CvCywF+LUGTyEqoJCeKJRXChrUOT4otPpKAV+dk3tQ2L75vf+5zyWXO5Rcqtt/Xn4TxtdyYcL4yi9MGD9PkCUM3x1FnDB+DiJM+MczlpuZsMZMXGNGRp1rDbuZFoj5uSPan+T290NwffituEK9MsRhFUxYFRNWg4Ql1MdBHJbHhEWYsAImrIgJCzPKE2aUJ8woT5hRnjCjfMCM8gEzyodj4lZ+gvVUOnrAOuZNbPSA9bxBa4dVMWE1SFjRYcI65E0Me8F3+7vkL7B6S+Tqw75Erj52aNA5aIRz0IjnoJHOQSOfg0Y5B416DhrtFDSSOweNc6h4OoeKp3OoeDqHiqdzqHg6h4qnc6h41vGKx/KgkTqrv6xhUpEL+/Ygcs+bd3cacJPqBgsu1bvBgkvd/oJVfjwVu5nxa8zQGjNhjZm4xkxaY+bPo95tXJkcVyfHtblxE4c2b+P85LjRXK/0GFfD67gwOW4wG6N/4IxUXselyXF5clyZHFcnx7W5caMr39lxfnIcTY4Lk+Mm50ubnC9tcr60yfnSJudLm5svxbnJcX5yHE2OC5Pj4uS4NDkuT44rk+Pq5LjJ+eIn54ufnC9+cr74yfniJ+eLn5wvfnK++Mn54ifni5+cLzQ5X2hyvtDkfKHJ+UKT84Um5wtNzheanC80OV9ocr6EyfkSJudLmJwvYXK+hMn5EibnS5icL2FyvoTJ+RIm50ucnC+jz9pxb2S0/f26XimjL5ex7b3mQvLtddzALyk+jSv1dVybGzf6GMaO85PjaHJcmBwXJ8elyXGD92gLPPu48nW+vJYzYvb3Iu725+umtTKqqAtbqUustBVWRp00ha34JVZoiZWwxEpcYiUtsbLk3c9L3v285N3PS979suTdL0ve/bLk3S8yMzk9rOTSsSLz9PfK8fbn6/fOUv/86d/G+clxNDluEG9reFTGa8rvveH99rH0/nPvno6K9j+0bup7z2c28cod70VIVAkSVYZEVSBRVUhUDRHV6FvNwag8JCqCRAUZ2xtkbG+Qsb1BxvYGGdsbZGxviLG9OsTYXp1QbN+7nHjvc2RQ0X4lDT21utyS5d+YCBBTAMQUATElQEwZEFM5ANP2TeL3r0NyHUwVEFPDw+TdEZjyPZCHLyd975g8ICYCxBQAMcVDMUUXOpgSIKYMiKngYSIHiCkAYjpC72K9/zq28oopHBHHE91/nagTnwIBYgqAmCIgpiPiePL3dskpdPKnkAExFUBMFRBTw8MUHSAmD4jpkDge9vgUOxocAyCmCIgpAWLKgJgKIKYKiKnhYUoOEJMHxAQYxxNgHE/xWA3uYjokFux9AvOXdhe/MWUPiCkAYjpC73K51zBy8x1MDQ9T8YCYEiCmI+ZT2ef49q2ug6kAYqqAmGTeO3Jpx0TBf8H0l53qFtnxi+zQIjtB3k7q2YmL7KRFdvIiOzJxJqX9UJ9POXTsyMSOXPf+Rj53Oi1Xof2krB2hHaK8HZl4UJ/mQSXq2KFFdsIiO3GRHZl4sD3nh53Ws5MX2SmL7MjEg/ZoYrT93Yk7QnsQOTtNaFchb0ckHpCv+20IROQ6dkjGzn5h5y87nsn1fNs/ovkW65dsr/PrXPdJ9vUcUvnNIZyAQzwBh6SAQ9v/8eJch0M+hEPZ06rWQgdVOQAVuf2GF3KdPZVNZv/in6OiB6rcQdWORpVea1lNZg/jd1CVzhP0/mhUtTPbPR2Cqj26FFNi4kjam5Sk52y+/SYQtBOI2gkk7QSydgIyktXinnNQy6+FjSaz+ZLifnxg+zu3jh2/yA4tshMW2YlCdh4TOX6RsrsdmTc+5z2b/NU6tmMny9tpnQUgFXE7hXrPpy6yI5OWbdL0Ph4E9wN2OvNNZuPwB3ZE3tPg4qMbm4s9v4m8p4H27da/Ol3Hjh2R9yc9FbwTUe7YKTJ28pOdThOUJrNp9AM7bY0dmc2dH9jxi+zQIjthkZ24yE5aZEcmHoSwdw9M0Xf0VGaj4gd26iI7bY0dmU2CH9jxi+zQIjsy8SCm9rDztzyxswFm+27w++d5W4E9L8pef1wp3rW60vNFQL9XcDLb+Q5lkNQzyOoZFPUMqnoGTTuD7NQz8D/O4GaHFtkJi+zIqFB60utU3NInn9QzyOoZFPUMqnoGTTuD4tQz8OoZ0I8zuNkJi+zERXZkVKg8NpRtf3e+j8gcsvjATllkpy6y09bYkTng8IEdv8gOLbITFtmJi+wsigd1UTyoi+JBXRQP6qJ40BbFg7YoHsgccEg1PNalNXb0VOaAwwd24iI7aZGdvMhOWWSnLrLTVtgJTuaAwwd2/CI7tMhOWGQnLrKTFtnJi+yURXbqIjsi8SD7/di1zxQzs5IXPTASnMym+IM5+BNwEIop+ZGb1de9oJsdkTlbfNxvCN3+Tq92ZPbQNqLdbdvf1LETFtmJi+wkGTt7G9hff3fmgcwe2g/slDV2ZPactpgfp8Bi7jwfmb2g26fIxzzIsXTsyMy3/OS34jrvqUyz1K1ksv98W56Hjh2Z+VYee1s3O7Fjp4jbab433+oiOyLxelsq54ed2pnXMntOP7DjF9mhRXYk4gFtS7573Nn+jj07cZGdtMhOXmRnEA+2IsjdTnT+i53buDo5rs2NG+3xZMf5D8Y9dR3Yx9HkuDA5Lk6OS5Pj8uS4MjdusDsq+sfhkuhDfB3nJ8fR5LgwOS5Ojus/h0iPhCFSasx7Xtx+XLk8Zc2/106DnSWyNuoCG+3nbQz2T8ja8Ats0AIbYYGNuMBGWmBjwXteFrznZcF7Xha85/XP3/PbOD85jibHhclxcXJcmhyXJ8eVyXF1blwbPb/6NK7V13FxctzAnyHshcgY0mveOvgGyY8rk+Pq5LjBuxooPI0rfx/nB9/w+HF+chxNjguT4+LkuDQ5bjRfyiMv3xaMr+NG86W5x7jWXseN5kvZD1PG6NzruMF8iY9OvDH6lzzZe/eBPf/Kz4fJcYPnF9vjOSRPr+PS5Lg8Oa5Mjhs8v1ja07jwOq7NjRv0QOHH+clxNDkuTI6Lk+NG8+VRmN7+jfo+13n785uZvMZMETCTa7rHglyL/1vm5qkusNF+3kZwEjba3mQiNyovNvwCG7TARlhgIy6wkRbYyAtslAU26gIb7edtxAXveZR5z/djLbmlVxu0wEZYYCMusJEW2MgLbPz5e/7XuOQnx9HkuLhkd4OX6dbQYtkX1S29dqDa7ORFdmR2A6Sn3Q0p1Y6dushOW2NH5qz/B3b8Iju0yE5YZEcmHiRfGTtpkZ28yI5QPChPz6eVjp26yI5MPMhhL6Z0d6N5mVPXH9jxi+zQIjthkZ24yE5aZEcmHnC7LL3MCeYP7NQ1dmRO/LK7u73Mid9CaS/eF8q5YyfI2HGBsRNl7Dw2CZUQvurP908QPNr05Fy+/PrGIZ2AQz4Bh6KAw9srWDYO9RAOb69g2VC1A1AxV7AEL3N6+89R0QNV7qDyR6N6vYJlQ0VHoyq9JxiORlU7s13m1Pkfo5K6fmIjkLQTyNoJFO0EqnYCIpL11JBr+7u8JrAk0zKgbhWF3U742xUSr78vaf/XS+ocviCZBgPiqAgSVTgEFT2hCh1UERJVgkSVIVEVSFQVElVDROV/ILannh2/yI5Q/G37x7/aaf+/2QmL7MRFdtIiO3mRnbLITl1kRyZ6xOwfdupr2xmSuW7vAzt+kR1aZCcsshMX2UmL7OQfsNM6dmTiwVNLhVqpZ0cmHtS611Bro9SxIxMPtnLuw0563eRCMq1P/man4zeZ6/bq00nq5lxnJRRI3g514rVMK5cP7IjEg+Ye7aWbSz2/pUV28iI7ZZGdushOW2NHqJULb8cvskOL7IRFdhbFg7goHsRF8SAKtVuMu25nnzq6nTS0RHz/EZqShpaIHAc6AYeggMP7zQAks/n8jzm83wxAMlvV/xAVtxmAZDa2/zmqt5sBSGYb/HdQdTYDkMym+e+gKr0n2I5G1dkMQNkdgkrsQyhlr50AaScQtBOI2gnISBbVveCQg3vdBUwypyk+sFMW2amL7LQ1dmROU3xgxy+yQ/J2fGeTi8xpipwepwa39L1T8JY5TbH924+FZg49vyUhPvnJTu3YkYkHOT+tdf7WC3diw4vM2QtxVBUSVTsEFbMxQeYeO3FUHhIVQaIKkKgiJKoEiUo+thfX0V6ZUy25pMc1KCV3tFfm5Ekuj2LyZsd37LQfsNPReJnTIR/YkYl65emamtJ6dmiRnbDITlxkJy2ykxfZKYvs1EV22hI7wblFdvwiO7TITlhkZ/D+lLAPDOWpQtu1E7c12e9fx5x7VoqIlb2SFb9+uLlbqUustBVWRpugha34JVZoiZWwxEoUsbJ3mY65szUwjLY+C1vJS6yUJVbqEitthRVyS6z4JVZoiZWwxMqSd5+WvPu05N0fbQmO+3ej7e+vVv4aN9rim/xjXPL1dZyfHEeT48LkuMFMelQ/fv3dGZcmx+XJcWVyXJ0c1+bGjbaAsuMG8yW2+vT82us4mhwXJsfFyXFpclyeHFcmx9XJcW1u3GjLIztucr6kyfmSJufLaFtW2K8P9L8SAGb1uBUn9zC2FaiI+bkLj/ZWLhR2p8GvYyS/f//r79dibxjt49JGo56DRtNA47GP8tffr5X9MNpapo2GPwcNOgeNcA4a8Rw00jloqFBxnoYO3fDpQcN3athFR6TaK/Hb353NXqHoiFQsDQ2Ripzf343t706BpGiIVB/Q0BCpPqChYb3xAQ0N640PaGjQDZ5G1bDe+ICGhvXGBzQ0qPgHNDSo+Ac0zqHi9RwqXnWoeKIHjc5Wx1B1qDhLQ4eKh/xE43Urf2g66lTc6q/pWP2FRw23dbZPh6avTtVp0RWavjpVl4a+OlWXhr46VZeGiq9NLT9FqtrRjabiaxNPQ0fVkKERnY6vTSwNHSrO0tCh4iwNHSrO0tCh4s80OqXo6HSoOFNRj06HirM0dKg4R8MfohuU91YBjkrpwDpGBxw9vOtaBxZhwgqYsCImrIQJK2PCKpiwDll90KPH0fZ3D1aDhEUOE5bHhEWYsAImrIgJK2HCypiwCiYszChPmFE+YEb5IBO3Ut1/Tpna+5+Tj4+PkP6JQ3+Z5Mjvy6Tn/rP5TiHiU8iPlZ6r9Eoh6aeQ9VMo+ilUfAp7x0Py/ul0/U6hqacQnX4KXj8F0k9BgTpzFBSoM0dBgzq7J10IrxQ0qDNDQYM6MxQUqDNHQYE6MxSSAnXmKChQZ46CAnXmKChQZ46CAnXmKOhX56RfnZN+dc7wuuCqv99x9evGnPZKAV4XXE1PFPJrNS/D6wJPAV4XeAroEcmXUvf2N6U+t9e6U0CPSBvsEB4UYnylgL5e2GAX/6BQO08Bfb3AUyjouvABBXRd+IACui740vx+n0D58m3uTgFdFz6gEPVTQF8vfEABX51ZCvjqzFLAV2eWArw6t/zYjdxyzS8UKrw6b7D3p9CK968U4NWZpwCvzjwFeHXmKcCrM08BXp15CvDqzFOAV+e/USivFODV+Yu0dSngq3PJ9KBQXldtDV+dS3s8hRpf34WGr84sBXx1ZingqzNLAV+dWQr46sxSwFdnlgL8tzaXHt/ats9u5f3Pf7Xj/v3rX62CXvnCb5sR5gu/x0aUb3L4H15l+eJ/pZXli/9JV5Yv/vdfWb7xYnzhdxwJ84XfniTM91r5VXLXyq+Su1h+5S+WX/mL5Vf+YvmVv1h+JdSqRw/fi+VX/mL5lb9YfuUvll/5i+VXdLH8ii6WX5Hq/OpGAT9lyiE9KGT3SiHqp4Cf2OTyOBiSW3ulgJ+rsBTw0w+OQoDfVkGlpP3fLiW/UoDfVsFTgN9WwVOA31ZB9XHOi9rrLqkE3/7rAwrw2yp4CvDbKngK8JseeQrwmx55CvCbHlkK8O2/PqCgQBceXaipUocC/iEpFx5HmF1NrxTwD0lR2PeqFUrx/c9zc/dDnvnLBWut8+NK8Z4EV3q+VK79dg7+8asDnYN/7Po458A3gDrUOfhHxQ90Dv4h9AOdg3+8/UDnRHPO2Dn4R/IDPVq1hPhykjrBt/D6gAJ+tslSwM8JWQr4mRtHAb6R2gcU8LMglgJ+rsJSwNeFrfTwEM32WoVQ0MIr+Pz0FF4pKGgexT0FBc2jvr4Lr19qFDSPYilE/RS0ZaodCgoy1eQeFHJ8paAgU+UoKNAFjoKCTJWhgN88iqegIFPlKChQZ46CAnVm0jz85lE8BQXqzFFQoM4cBQXqzFHQv2rDbx7FUsBvHsVTUKDOHAUF6sxR0K/O+M2jeAr61Rm+ExG/LQq+udAGO+YHhfRCIcP3C/rb/jryrxTwd7+zFPB3v7MUlO1+71GA1wVq6fE6t9xeKeDvfmcp4O9+Zyng735nKeCrM0sBX505CvDdZj6gAK/OWwKxH+zaZCy+UoBX5w12eVBInacAr848BXh15inAqzNPAV6deQrw6sxTgFdnngK8On+l8HqxY4bvVfI3aetRwFdn7/dV2yZjr+oM31Fkg50eE4nc68ITvqPIBxTw1ZmlgK/OLAV8dWYp4KszSwFfnVkK+OrMUcDv65IDxZ1CiK85En5fF54CvjqHx9VRObzeZZ/x+7rwFODV+d35/defM13mMn4TGGG+qvszTPDF3xYlyxd/D5UsX/wNV6J88bvcCPPF38olyxd/35csX/xNYrJ848X4Xiy/0t3/aoLvxfIrBf2vZPleLL9S0KVKlu/F8isFvaRk+V4sv1LQ8UmW78XyKwUdn2T5Xiy/UtBLSpav6vzqLwr4LY8ouLb/2yEwF9P4mvatMPV5P1L6zRf//IIsX3hJFeaLfzJCli/+MQpZvvhnLmT54h/QkOWLf5pjnm/OL3wL/tGPeb6FXvnin+KU5Xvm/KrH98z5VY9vPBnf5vaDXs37V75ny684vmfLrzi+Z8uvOL5ny6+aiw++nXh1tvyK4YvfrlCY79nyK47v2fIrju/Z8iuOb7wY39PVr1p5y/d09atnvvWV7+nqVwzf09WvGL6nq1+954vfcPJP4/Oj0Ul77lp853u6/Co+9Oj55Pid7+nyq7IjadW98j1dfvXMtzOf4+nmc3jw7czn09WvGL4ny6/I7X0iyMXO+3uy/Irle7L8ilyKO99a/s63KOgC+mfv70by/mvvvzzfzo8fXV6Tf3XN2aT6j1yT9x6+r19Zi4KupYe5JpprRq45W64g6JqzlW0EXXO2Co+ga85WDBJ0zdnqRnKuUdAd9zDXXDobfu8ay4aHrrFseOiaaK4ZuUYmrwlPN5XEXJmfJwqPJS893XddfoOqh4DK/gHqqRn6HVQDBCXUxVYYlEcERYigAiKoiAgqIYLKiKAKIijEiE6IET0gRnShLpqeHnc4+Rief34zIxN5yD9yKYr11UxaYyavMVPWmKlCZh5TgHJ5NdOWmBHq2ceakcmEtm/AT2Zen41QhzrWTFhjJq4xk9aYyWvMlDVmZKKAT09CUNqrmbbEjFBnKdaMX2OG1pgJa8zENWbSGjN5jZmyxsyaKJDWRIH881Fg+y/514/9qDny46Yf//canR81GH4/xk+MoYkxYWJMnBiTJsbkiTFlYkydGDMxD9LEPEgT8yBNzIM0MQ/SxDxIE/Ng8IK/2XblRx2F3tTS/ahLzXs7ecJOmRhTJ8a0Px8z6HzxfoyfGEMTYyae6aATwPsxaWLMxDwoE/Og/OE82P5L+a1cXVbvm6n5weUW7KgyNapOjWozo/qazI7yU6NoalSYGhWnRk3NjTg1N+LU3IhTcyNOzY00NTfS1NxIU3MjTc2NNDU30tTcSFNzI03NjTQ1N9LU3MhTcyNPzY08NTfy1NzIU3MjT82NPDU38tTcyFNzI0/NjTI1N8rU3ChTc6NMzY0yNTfK1NwoU3OjTM2NMjU3ytTcqFNzo07NjTo1N+rU3KhTc6NOzY06NTfq1NyoU3OjTs2NNjU32tTcaFNzo03NjTY1N9rU3GhTc6NNzY02NTfazNwozk2N8lOjaGpUmBoVp0alqVF5alSZGlWnRk3NDT81N/zU3PBTc8NPzQ0/NTf81NzwU3PDT80NPzU3/NTcoKm5QVNzg6bmBk3NDZqaGzQ1N2hqbtDU3KCpuUFTcyNMzY0wNTfC1NwIU3MjTM2NqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumiZqouWqbpomaqLlqm6aJmqi5apumidqovWqbponaqL1qm6aJ2qi9apumidqovWqbponaqL1j+vi27/pf76KflBq4m9kd1WWdtH+vDXQbltUJgZFGcGpZlBeWZQ94ER3bc1UkydQXVmUJsY1K9UcoP8zCCaGRRmBvXf4ng/oheS6wxKM4PyzKD+K5zvG+BDa51BdWZQmxg0qE8yg/z7QdGFziCaGRRmBsWZQWlmUHdGpL1hePaxM6jMDKozg9rEoDjznOKM9/o1rljvETa20hnUnRGJ7oMSdSZsv+rEDUozg/LMoP6M2Dfqp9AJLP2KEzeoTQzq15u4QX5mEM0MCjOD+jMi7M8pdiZsv9TEDcozg8rMoDozqE0M6leZuEF+ZhDNDAozg2ZmRJmZEf360tOE7Q3qF29So3exvF9P4QalmUHduZfLXQBy62TL/fIBNyjMDCozg7qcyu6IbSnYGdT+fBD1V9hvBm3/rf365Rb8Bgd10t6iIucXGd2GxblhaW7Y4MRO3Tup5No6w8rcsDo3bHCEq+3n5Yr7m5L8n+2//r//5d//9b/813/+t/+1Dfr1v/7v//Ev//Gv//Y/fv/X//j//uf9f/mv//6v//znv/73//w///3f/uW//T//+9//23/+57/9y6//7f9yv//j/6ZA9R+0rSg2QL+ea4rlHymVX/Bu/7N32//s06//h7/9P9r2/yD/a0L4+7/im6v/8I32f8X9I7v7v+Frc//Y/mP/N7a/86//R/31b9Bfk+qv3+Vt2K8TCb/+3+H+T4da2z+2OoD7/U9vq45/ENH9H9/+5/CP7T/q/R/ffup//T78+lfi/V+JW/nqH7H6O8CwLapDjvd/JW41zH9sv4n3fyVWctvvNzvbv5J2LFvx/B9hq2n9/ldyjP/Iaf9XwvYVavuf8wNL3cBu/xH3I8Z/8SzO/+PXvprf/8pf0+TXjs/dYXl7DX9tX9wdljf0v+bCfuDrr3HVl82NVB6O3qhv/5H3Okm4UflHbLvDtlf/lwPd/o/Tr9Xu9h/18YrfQMRfIGLZptw27f5/","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use jwt::JWT;\n\nfn main(\n    data: BoundedVec<u8, 512>,\n    base64_decode_offset: u32,\n    pubkey_modulus_limbs: [Field; 18],\n    redc_params_limbs: [Field; 18],\n    signature_limbs: [Field; 18],\n) -> pub bool {\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    jwt.assert_claim_number(\"recyclabilityPercentage\".as_bytes(), 85);\n\n    true\n}\n","path":"/home/david/dev/noir/circuit/src/main.nr"},"63":{"source":"use base64::BASE64_URL_DECODER;\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse nodash::str_to_u64;\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::RBN2048};\nuse sha256::sha256_var;\nuse string_search::{StringBody, SubString};\nuse zkemail::partial_hash::partial_sha256_var_end;\n\n/**\n * @brief Struct representing a JWT. Use the init functions to create an instance\n *        Currently only supports RSA 2048/SHA256 signatures\n **/\npub struct JWT<let MAX_DATA_LENGTH: u32> {\n    data: BoundedVec<u8, MAX_DATA_LENGTH>,\n    pubkey_modulus_limbs: [Field; 18],\n    redc_params_limbs: [Field; 18],\n    signature_limbs: [Field; 18],\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    is_partial_hash: bool, // compile time variable used internally\n}\n\nimpl<let MAX_DATA_LENGTH: u32> JWT<MAX_DATA_LENGTH> {\n    /**\n    * @brief Initialize JWT struct\n    *\n    * @param data: Signed JWT data (base64 encoded `$header.$payload`) as byte array of ascii characters\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Any 4x multiple from the payload start index.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs (2048-bit split into 18 limbs)\n    * @param signature_limbs: RSA signature limbs (2048-bit split into 18 limbs)\n    **/\n    pub fn init(\n        data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [Field; 18],\n        redc_params_limbs: [Field; 18],\n        signature_limbs: [Field; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(data.len() <= MAX_DATA_LENGTH, \"data length is too long\");\n\n        JWT {\n            data,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            // below fields are not relevant unless for partial hash\n            full_data_length: MAX_DATA_LENGTH,\n            partial_hash: [0; 8],\n            is_partial_hash: false,\n        }\n    }\n\n    /**\n    * @brief Initialize JWT with partial SHA256 hash'ed input\n    *        Since SHA hash is expensive to compute in circuit, we can optimize by pre-hashing up to a certain block outside the circuit,\n    *        and verify for correctness in the circuit. This is possible since SHA works in incremental blocks.\n    *        You can pre-hash up to the SHA-256 block from where you want to extract a claim.\n    *\n    * @param partial_data: Signed JWT data (base64 encoded `$header.$payload`) after partial hashed block\n    * @param partial_hash: The 256-bit partial hash of the `partial_data` up to a certain block\n    * @param full_data_length: The full length of the `data` (before partial SHA)\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Trimming `offset` nubmer of bytes from the data should it base64 decode-able.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs\n    * @param signature_limbs: RSA signature limbs\n    **/\n    pub fn init_with_partial_hash(\n        partial_data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        partial_hash: [u32; 8],\n        full_data_length: u32,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [Field; 18],\n        redc_params_limbs: [Field; 18],\n        signature_limbs: [Field; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(partial_data.len() <= MAX_DATA_LENGTH, \"partial_data length is too long\");\n\n        JWT {\n            data: partial_data,\n            full_data_length,\n            partial_hash,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: true,\n        }\n    }\n\n    /**\n    * @brief Verify JWT signature with RSA 2048/SHA256\n    **/\n    pub fn verify(mut self) {\n        let mut data_hash: [u8; 32] = [0; 32];\n\n        if (!self.is_partial_hash) {\n            // this is a compile time conditional\n            // Hash the data using SHA256\n            data_hash = sha256_var(self.data.storage(), self.data.len() as u64);\n        } else {\n            // Compute the full SHA256 hash with the given partial hash\n            data_hash = partial_sha256_var_end(\n                self.partial_hash,\n                self.data.storage(),\n                self.data.len() as u64,\n                self.full_data_length as u64,\n            );\n        }\n\n        // Verify RSA signature\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(false, self.pubkey_modulus_limbs, self.redc_params_limbs);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, self.signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(data_hash, signature, 65537));\n    }\n\n    /**\n    * @brief Get a string claim from the JWT payload\n    *\n    * @param KEY_LENGTH: The length of the claim key\n    * @param MAX_VALUE_LENGTH: The maximum length of the claim value\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        self.get_claim::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key, true)\n    }\n\n    /**\n    * @brief Assert a string claim in the JWT payload.\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: BoundedVec<u8, MAX_VALUE_LENGTH>,\n    ) {\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> =\n            self.get_claim_string::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a number (u64) claim from the JWT payload\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_number<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> u64 {\n        let claim = self.get_claim::<KEY_LENGTH, 20>(claim_key, false);\n        str_to_u64(claim.storage())\n    }\n\n    /**\n    * @brief Assert a number (u64) claim in the JWT payload.\n    *        Refer to `get_claim_number` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_number<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: u64,\n    ) {\n        let value = self.get_claim_number::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a boolean claim from the JWT payload\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_bool<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> bool {\n        let value = self.get_claim::<KEY_LENGTH, 5>(claim_key, false);\n        let mut is_true = true;\n        for i in 0..4 {\n            is_true = is_true & (value.storage()[i] == \"true\".as_bytes()[i]);\n        }\n        let is_false = value.storage() == \"false\".as_bytes();\n\n        assert(is_true | is_false, \"incorrect value for claim\");\n        is_true\n    }\n\n    /**\n    * @brief Assert a boolean claim in the JWT payload.\n    *        Refer to `get_claim_bool` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_bool<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: bool,\n    ) {\n        let value = self.get_claim_bool::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Internal function to get claim bytes from the JWT payload\n    **/\n    fn get_claim<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        //Safety: extract the value in unconstrained mode, and verify later\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> = unsafe {\n            self.extract_claim_unconstrained::<KEY_LENGTH, MAX_VALUE_LENGTH>(\n                claim_key,\n                is_value_quoted,\n            )\n        };\n\n        // constrain the extracted value is present in the payload using string_search lib\n        // haystack is the base64 decoded payload;\n        let haystack = self.prepare_haystack();\n\n        // needle is the key with quotes around it - searching for just the key string might return false positives from elsewhere\n        // Note: key length is known at compile time as this lib doesn't support runtime keys\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = claim_key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // assert value after quoted key is a colon\n        let colon_index = position + KEY_LENGTH + 2; // +2 for the quotes around the key\n        assert(haystack.body[colon_index] == 58); // :\n\n        // assert the value is correct - string have quotes around them, numbers and booleans don't\n        let mut value_start_index = colon_index + 1; // Value starts after the colon\n        let mut index_after_value = value_start_index + value.len(); // Index after the value, quoted or otherwise\n\n        if (is_value_quoted) {\n            // adjust start index for the quotes around the value\n            value_start_index = value_start_index + 1; // Adjust for the quote before the value\n            index_after_value = index_after_value + 2; // Adjust for the quotes around the value\n\n            // assert the char before and after the value is a quote\n            assert(haystack.body[value_start_index - 1] == 34); // \"\n            assert(haystack.body[index_after_value - 1] == 34); // \"\n        }\n\n        // assert the value is correct\n        for i in 0..MAX_VALUE_LENGTH {\n            if (i < value.len()) {\n                assert(haystack.body[value_start_index + i] == value.storage()[i]);\n            }\n        }\n\n        // assert the char after the value is a comma or a closing brace (last claim in the payload)\n        let char_after_value = haystack.body[index_after_value];\n        assert((char_after_value == 44) | (char_after_value == 125)); // , or }\n\n        value\n    }\n\n    /**\n    * @brief Internal function to prepare the haystack for string search (base64 decoded payload with offset applied)\n    **/\n    fn prepare_haystack(\n        self,\n    ) -> StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> {\n        // We need to decode the payload from the payload_b64_offset; i.e. data.slice(0, base64_decode_offset)\n        let mut data_to_b64_decode: [u8; MAX_DATA_LENGTH] = [0; MAX_DATA_LENGTH];\n\n        // Conditional inside the for loop blows up the constraint size\n        // So we fill the full MAX_DATA_LENGTH (rotate on overflow) and prepare a BoundedVec with the correct length later\n        for i in 0..MAX_DATA_LENGTH {\n            data_to_b64_decode[i] =\n                self.data.storage()[(i + self.base64_decode_offset) % self.data.len()];\n        }\n\n        let data_to_decode_bv: BoundedVec<u8, MAX_DATA_LENGTH> = BoundedVec::from_parts(\n            data_to_b64_decode,\n            self.data.len() - self.base64_decode_offset,\n        );\n\n        // Decode the payload\n        let payload: BoundedVec<u8, ((MAX_DATA_LENGTH / 4) * 3)> =\n            BASE64_URL_DECODER::decode_var(data_to_decode_bv); // b64 decoded length is ceil(MAX_DATA_LENGTH / 3) * 4\n\n        // Create the haystack\n        let haystack: StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> =\n            StringBody::new(payload.storage(), payload.len());\n\n        haystack\n    }\n\n    /**\n    * @brief Unconstrained function to extract claim bytes from the JWT payload\n    **/\n    pub unconstrained fn extract_claim_unconstrained<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        let haystack = self.prepare_haystack();\n\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // Get the value after the key\n        let mut value_start_idx = position + key.len() + 3; // +3 for the quote around the key and the colon\n        if (is_value_quoted) {\n            value_start_idx += 1; // +1 for the quote before the value\n        }\n\n        let mut value: BoundedVec<u8, MAX_VALUE_LENGTH> = BoundedVec::new();\n\n        for i in 0..MAX_VALUE_LENGTH {\n            let val = haystack.body[value_start_idx + i];\n            if ((val == 34) | (val == 44) | (val == 125)) {\n                break;\n            }\n            value.push(haystack.body[value_start_idx + i]);\n        }\n\n        value\n    }\n}\n\n#[test]\nfn test_verify() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_verify_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_get_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_get_claim_string_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_assert_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let value: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    jwt.assert_claim_string(\"email\".as_bytes(), value);\n}\n\n#[test]\nfn test_get_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let iat: u64 = jwt.get_claim_number(\"iat\".as_bytes());\n    let expected_iat: u64 = 1737642217;\n    assert(iat == expected_iat);\n}\n\n#[test]\nfn test_assert_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let expected_iat: u64 = 1737642217;\n    jwt.assert_claim_number(\"iat\".as_bytes(), expected_iat);\n}\n\n#[test]\nfn test_get_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email_verified: bool = jwt.get_claim_bool(\"email_verified\".as_bytes());\n    assert(email_verified);\n}\n\n#[test]\nfn test_assert_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n}\n\n#[test]\nfn test_get_last_claim() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let exp: u64 = jwt.get_claim_number(\"exp\".as_bytes()); // exp is the last claim in the test payload\n    let expected_exp: u64 = 1799999999;\n    assert(exp == expected_exp);\n}\n","path":"/root/nargo/github.com/zkemail/noir-jwt/v0.4.3/src/lib.nr"},"65":{"source":"unconstrained fn __boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let mut r: [Field; Range] = [0; Range];\n    for i in limit..Range {\n        r[i] = 1;\n    }\n    r\n}\n\n/**\n * @brief Return a size-Range array of values that describe whether an index `i` is in the range `0<=i<limit`\n * @details When evaluating variable-length loops of size `limit`, it is neccessary to iterate over a maximum bound defined at compile-time\n *          Any constraints or evaluations that occur where `i >= limit` must be discarded.\n *          This is most efficiently performed by using predicate `Field` values, where `predicate[i] = 0` if `i < limit`, otherwise `predicate[i] = 1`.\n *          This method efficiently generates such predicate values more efficiently than querying whether `i <= limit` at every iteration.\n *          Gate cost is 3 * Range\n **/\npub fn boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let r = unsafe {\n        //@safety r contains claims about whether `r[i] >= limit`. the rest of this function checks this claim is correct\n        __boundary_check(limit)\n    };\n\n    let mut transition_index = 0;\n    // **\n    // We have an array of Field elements `r` such that:\n    // if i < limit, `r = 0`\n    // if i >= limit, `r = 1`\n    // We validate the predicate list `r` is correct by checking:\n    // 1. every r[i] element is 0 or 1\n    // 2. if r[i] = 1, r[i+1] must also be 1\n    // 3. if r[i] = 0 and r[i+1] = 1, then i == limit\n    // we check point 3 by tracking a `transition_index` variable, where\n    // transition_index += (1 - r[i]) * (r[i+1]) * i\n    // i.e. if r[i] == 0 and r[i+1] == 1, transition_index += i\n    //      else transition_index += 0\n    // NOTE: total constraint cost is 3 gates per iteration\n    // **\n    if Range > 0 {\n        for i in 0..Range - 1 {\n            assert_eq(r[i] * r[i], r[i]);\n            assert_eq(r[i] * r[i + 1], r[i]);\n            let idx = (r[i + 1] * (1 - r[i])) * (i as Field + 1);\n            transition_index = transition_index + idx;\n            std::as_witness(transition_index);\n        }\n        assert_eq(r[Range - 1] * r[Range - 1], r[Range - 1]);\n        transition_index = transition_index + (1 - r[Range - 1]) * limit as Field;\n        assert(transition_index == limit as Field);\n        r\n    } else {\n        [0; Range]\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/boundary_check.nr"},"66":{"source":"use super::defaults::{\n    BASE64_ELEMENTS_PER_CHUNK, BASE64_PADDING_CHAR, BYTES_PER_CHUNK, INVALID_DECODE_VALUE,\n};\n\npub use crate::boundary_check::boundary_check;\nuse crate::tables::{\n    BASE64_DECODE_BE_TABLE, BASE64_DECODE_BE_URL_TABLE, BASE64_DECODE_BE_URL_VAR_TABLE,\n    BASE64_DECODE_BE_VAR_TABLE,\n};\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4)\npub mod Base64DecodeBE {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 0>(input)\n    }\n}\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4), but WITHOUT padding\npub mod Base64DecodeBENoPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 0>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5\npub mod Base64DecodeBEUrlSafe {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 1>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5, but WITH padding added\npub mod Base64DecodeBEUrlSafeWithPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 1>(input)\n    }\n}\n\n/**\n * @brief Return a human-readable error if the input is invalid Base64\n * @details We constrain the decoding to be correct by using a lookup table to decode Base64.\n *          Validation is performed by batch-checking that no lookups returned an error state.\n *          This produces unhelpful error messages so we put this sanitised check in an unconstrained fn\n **/\nunconstrained fn __validate_decoded(decoded: Field, input_byte: u8, offset: u32) {\n    assert(\n        decoded != INVALID_DECODE_VALUE,\n        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n    );\n}\n\n/**\n * @brief Given a variable-sized number of Base64 encoded characters, return a *claim* about how many are padding chars\n * @note The returned value is only a claim and must be validated\n **/\nunconstrained fn __get_num_padding_chars_var<let InputElements: u32>(\n    input: BoundedVec<u8, InputElements>,\n) -> (bool, bool) {\n    let len = input.len();\n    let r1 = if len > 1 {\n        input.get(len - 2) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    let r2 = if len > 0 {\n        input.get(len - 1) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    (r1, r2)\n}\n\n/**\n * @brief Take an array of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\nfn decode<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: [u8; InputElements],\n) -> [u8; OutputBytes] {\n    let rem = OutputBytes % 3;\n    // Calculate the number of padding characters and the length of the input without padding\n    let num_padding_chars = if rem == 1 {\n        2\n    } else if rem == 2 {\n        1\n    } else {\n        0\n    };\n\n    // Assert that the output length & input length are correct\n    // Every 3 output chars will be encoded as 4 base64 input chars\n    let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n    if Pad != 0 {\n        assert(\n            encoded_length == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n        );\n        // enforce Base64 padding is valid\n        if num_padding_chars == 2 {\n            let offset = InputElements - 1;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n            let offset = InputElements - 2;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        } else if num_padding_chars == 1 {\n            let offset = InputElements - 1;\n            assert(\n                input[InputElements - 1] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        }\n    } else {\n        let expected = encoded_length - num_padding_chars;\n        assert(\n            encoded_length - num_padding_chars == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n        );\n    }\n\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n    let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    // validity_check = accumulator value that we add every output from BASE64_DECODE_BE_TABLE into.\n    // Invalid error states will return a lookup value of -2^32 , which will cause `validity_check` to fail a 32-bit range check.\n    // This batch-validation technique is more efficient than asserting every returned token is valid.\n    let mut validity_check: Field = 0;\n    if num_chunks > 0 {\n        let final_chunk = num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_TABLE[input_byte]\n                } else {\n                    BASE64_DECODE_BE_TABLE[input_byte]\n                };\n                validity_check += decoded;\n                slice += decoded as Field;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        // process the final chunk, which may contain padding\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        let base64_elements_in_final_chunk = if Pad != 0 {\n            InputElements - base64_offset - num_padding_chars\n        } else {\n            InputElements - base64_offset\n        };\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_TABLE[input_byte]\n            } else {\n                BASE64_DECODE_BE_TABLE[input_byte]\n            };\n            validity_check += decoded;\n            slice += decoded as Field;\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n        }\n\n        // If any lookups returned an error state, this 32-bit range check will fail.\n        validity_check.assert_max_bit_size::<32>();\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n\n/**\n * @brief Take a variable-length vector of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\npub fn decode_var<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: BoundedVec<u8, InputElements>,\n) -> BoundedVec<u8, OutputBytes> {\n    // We don't know how many padding bytes the input string contains - we use an unconstrained fn to return a *claim* that we will later validate\n    let (has_first_padding_byte_claim, has_second_padding_byte_claim) = if (Pad == 1) {\n        unsafe {\n            //@safety get claims about whether the bytes input[input.len() - 2] and input[input.len() - 1] are padding chars\n            // we validate this later on by requiring these characters equal BASE64_PADDING_CHAR by looking up BASE64_DECODE_BE_VAR_TABLE\n            crate::decoder::__get_num_padding_chars_var::<InputElements>(input)\n        }\n    } else {\n        (false, false)\n    };\n\n    // num_padding_chars is a claim that depends on has_first_padding_byte_claim and has_second_padding_byte_claim being correct\n    let num_padding_chars: u32 = if Pad == 1 {\n        has_first_padding_byte_claim as u32 + has_second_padding_byte_claim as u32\n    } else {\n        0\n    };\n\n    let input_length = input.len();\n    let input = input.storage();\n\n    // boundary_flags = array of Field elements.\n    // if `i < input_length, boundary_flags[i] = 0`\n    // if `i >= input_length, boundary_flags[i+1] = 1`\n    // used as cheap(ish) predicates when iterating over bounded vector elements\n    let boundary_flags: [Field; InputElements] = boundary_check(input_length);\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n\n    let max_num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    let mut validity_check: Field = 0;\n    // if statement should be known at compile time\n    if max_num_chunks > 0 {\n        let final_chunk: u32 = max_num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n\n                let mut decode_index: Field = 0;\n                if Pad == 1 {\n                    let mut might_be_second_padding_char = 0;\n                    let mut might_be_first_padding_char = 0;\n                    // These if statements should not cost extra gates as the condition is known at compile time\n                    if (offset + 2 < InputElements) {\n                        might_be_first_padding_char = (1 - boundary_flags[offset])\n                            * (1 - boundary_flags[offset + 1])\n                            * boundary_flags[offset + 2];\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else if (offset + 1 < InputElements) {\n                        // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                        might_be_first_padding_char =\n                            (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else // last character\n                    {\n                        might_be_first_padding_char = 0;\n                        might_be_second_padding_char = (1 - boundary_flags[offset]);\n                    }\n\n                    // Cases where we need to require a padding character is present:\n                    // Case 1: we are at byte position `input.len() - 2` and `has_first_padding_byte_claim = true`\n                    // Case 2: we are at byte position `input.len() - 1` and `has_second_padding_byte_claim = true`\n                    let require_padding = might_be_first_padding_char\n                        * has_first_padding_byte_claim as Field\n                        + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n\n                    // The `decode_index` is used to map the input Base64 character into an output decoded character.\n                    // We know `input_byte` is in the range 0-255 , so we use a size 768 lookup to handle the following 3 cases:\n                    // Case 1 (index range 0-255): No special cases. We decode the Base64 ASCII char into an ASCII char\n                    // Case 2 (index range 256-511): We have exceeded the length of the input. The only valid input is 0, which decodes to 0 (all other byte values return an error state)\n                    // Case 3 (index range 512-767): A claim has been made that a padding byte is present, and we are at the appropriate byte location to check this.\n                    //                               The only valid input is BASE64_PADDING_CHAR, which decodes to 0. All other inputs return an error state\n                    decode_index =\n                        input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n                } else {\n                    decode_index = input_byte as Field + boundary_flags[offset] * 256;\n                }\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n                } else {\n                    BASE64_DECODE_BE_VAR_TABLE[decode_index]\n                };\n\n                validity_check += decoded;\n                slice += decoded;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            // convert the decoded slice into bytes and populate result array\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n        // process the final chunk\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        // might include padding characters\n        let base64_elements_in_final_chunk = InputElements - base64_offset;\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n\n            let mut decode_index: Field = 0;\n            if Pad == 1 {\n                let mut might_be_second_padding_char = 0;\n                let mut might_be_first_padding_char = 0;\n                // These if statements should not cost extra gates as the condition is known at compile time\n                if (offset + 2 < InputElements) {\n                    might_be_first_padding_char = (1 - boundary_flags[offset])\n                        * (1 - boundary_flags[offset + 1])\n                        * boundary_flags[offset + 2];\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else if (offset + 1 < InputElements) {\n                    // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                    might_be_first_padding_char =\n                        (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else // last character\n                {\n                    might_be_first_padding_char = 0;\n                    might_be_second_padding_char = (1 - boundary_flags[offset]);\n                }\n\n                let require_padding = might_be_first_padding_char\n                    * has_first_padding_byte_claim as Field\n                    + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n                decode_index =\n                    input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n            } else {\n                decode_index = input_byte as Field + boundary_flags[offset] * 256;\n            }\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n            } else {\n                BASE64_DECODE_BE_VAR_TABLE[decode_index]\n            };\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n            validity_check += decoded;\n            slice += decoded as Field;\n        }\n\n        validity_check.assert_max_bit_size::<32>();\n\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    if Pad == 1 {\n        assert(input_length % 4 == 0, \"base64 encoded strings must be a multiple of 4 bytes\");\n    }\n\n    assert_eq(\n        has_first_padding_byte_claim,\n        has_second_padding_byte_claim * has_first_padding_byte_claim,\n        \"if first byte contains padding so must the second\",\n    );\n    let output_length = ((input_length * 3) / 4) - num_padding_chars;\n    BoundedVec::from_parts_unchecked(result, output_length)\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = Base64DecodeBE::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = Base64DecodeBENoPad::decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = Base64DecodeBE::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafeWithPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: [u8; 44] = [\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ];\n\n    let input: [u8; 60] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ];\n    let result: [u8; 44] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 59] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ];\n    let result = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = Base64DecodeBE::decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_empty() {\n    let input: BoundedVec<u8, 0> = BoundedVec::new();\n    let expected: BoundedVec<u8, 0> = BoundedVec::new();\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_padding() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103, 61, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBE::decode_var(input);\n    println(f\"result {result}\");\n    println(f\"expected {expected}\");\n\n    assert(result == expected);\n\n    // fo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 8> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 6> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_standard_no_pad() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    // fo\n    println(f\"result {result}, expected {expected}\");\n\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56]);\n\n    assert(result == expected);\n\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 61, offset 3\")]\nfn test_decode_var_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([47, 43, 65, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([255, 224]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var() {\n    // base64: \"SGVsbG8sIFdvcmxkIQ==\"\n    let input: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81, 61, 61,\n    ]);\n    // base64: \"SGVsbG8sIFdvcmxkIQ\"\n    let input_no_pad: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81,\n    ]);\n    // \"Hello, World!\"\n    let expected: BoundedVec<u8, 16> =\n        BoundedVec::from_array([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);\n\n    // all configurations should decode the same way\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    println(f\"result {result}, expected {expected}\");\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_multi_chunks() {\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ]);\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input_no_pad: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ]);\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: BoundedVec<u8, 48> = BoundedVec::from_array([\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ]);\n\n    // all configurations should give the same encoding\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n","path":"/root/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/decoder.nr"},"103":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/constrained_ops.nr"},"104":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/expressions.nr"},"106":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/serialization.nr"},"107":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/unconstrained_helpers.nr"},"108":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut temporaries: [[Field; N]; M] = std::mem::zeroed();\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[Field; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/fns/unconstrained_ops.nr"},"110":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/params.nr"},"111":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self;\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    fn modulus(self) -> Self;\n    fn modulus_bits() -> u32;\n    fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    fn get_limbs(self) -> [Field; N];\n    fn get_limb(self, idx: u32) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    fn __neg(self) -> Self;\n    // unconstrained\n    fn __add(self, other: Self) -> Self;\n    // unconstrained\n    fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    fn __div(self, other: Self) -> Self;\n    // unconstrained\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    fn __invmod(self) -> Self;\n    // unconstrained\n    fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    fn assert_is_not_equal(self, other: Self);\n    fn validate_in_field(self);\n    fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    fn udiv(numerator: Self, divisor: Self) -> Self;\n    fn umod(numerator: Self, divisor: Self) -> Self;\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/runtime_bignum.nr"},"118":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/utils/split_bits.nr"},"119":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir-bignum/v0.5.4/src/utils/u60_representation.nr"},"127":{"source":"global ASCII_HEX_TABLE: [u8; 16] = \"0123456789abcdef\".as_bytes();\n\npub fn field_to_hex(value: Field) -> str<64> {\n    let mut result = [0 as u8; 64];\n    let bytes: [u8; 32] = value.to_be_bytes();\n    for i in 0..bytes.len() {\n        result[i * 2] = ASCII_HEX_TABLE[bytes[i] / 16];\n        result[i * 2 + 1] = ASCII_HEX_TABLE[bytes[i] % 16];\n    }\n    From::from(result)\n}\n\n#[deprecated]\npub fn to_hex_string_bytes(value: Field) -> [u8; 64] {\n    field_to_hex(value).as_bytes()\n}\n\nglobal U64_STR_LEN: u32 = 20;\npub fn str_to_u64(arr: impl Into<[u8; U64_STR_LEN]>) -> u64 {\n    let arr = arr.into();\n\n    let mut parsed_number: Field = 0;\n    for i in 0..U64_STR_LEN {\n        let chr = arr[i];\n        if chr != 0 {\n            parsed_number *= 10;\n            let value = crate::tables::ASCII_TO_NUMBER[arr[i]] as Field;\n            parsed_number += value;\n        }\n    }\n    parsed_number as u64\n}\n\npub fn ord(s: str<1>) -> u8 {\n    s.as_bytes()[0]\n}\n\n#[test]\nfn test_field_to_hex() {\n    let my_hash = 0x0d67824fead966192029093a3aa5c719f2b80262c4f14a5c97c5d70e4b27f2bf;\n    let expected = \"0d67824fead966192029093a3aa5c719f2b80262c4f14a5c97c5d70e4b27f2bf\";\n    assert_eq(field_to_hex(my_hash), expected);\n}\n\n#[test]\nfn some_test() {\n    let outer_hash = 0x0d67824fead966192029093a3aa5c719f2b80262c4f14a5c97c5d70e4b27f2bf;\n    let hex_challenge = field_to_hex(outer_hash);\n    let header_prefix: [u8; 26] = \"subject:Re: Tx request: 0x\".as_bytes();\n    let header: [u8; 90] = header_prefix.concat(hex_challenge.as_bytes());\n    assert(\n        header\n            == [\n                115, 117, 98, 106, 101, 99, 116, 58, 82, 101, 58, 32, 84, 120, 32, 114, 101, 113,\n                117, 101, 115, 116, 58, 32, 48, 120, 48, 100, 54, 55, 56, 50, 52, 102, 101, 97, 100,\n                57, 54, 54, 49, 57, 50, 48, 50, 57, 48, 57, 51, 97, 51, 97, 97, 53, 99, 55, 49, 57,\n                102, 50, 98, 56, 48, 50, 54, 50, 99, 52, 102, 49, 52, 97, 53, 99, 57, 55, 99, 53,\n                100, 55, 48, 101, 52, 98, 50, 55, 102, 50, 98, 102,\n            ],\n    );\n}\n\n#[test]\nfn test_str_to_u64() {\n    let s = \"13378584420\".as_bytes();\n    assert(str_to_u64(s.concat([0; 9])) == 13378584420);\n    assert(str_to_u64(\"02345678912345678912\") == 02345678912345678912);\n}\n\n#[test]\nfn test_char() {\n    assert(ord(\"a\") == 97);\n}\n","path":"/root/nargo/github.com/olehmisar/nodash/v0.39.4/src/string.nr"},"130":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/root/nargo/github.com/noir-lang/noir_rsa/v0.6.0/lib/src/rsa.nr"},"135":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"136":{"source":"mod utils;\n\npub use utils::{conditional_select, DebugRandomEngine, lt_f};\nuse std::collections::bounded_vec::BoundedVec;\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\npub struct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    pub byte_length: u32,\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\npub struct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    pub byte_length: u32,\n}\n\npub type StringBody32 = StringBody<62, 2, 32>;\npub type StringBody64 = StringBody<93, 3, 64>;\npub type StringBody128 = StringBody<155, 5, 128>;\npub type StringBody256 = StringBody<279, 9, 256>;\npub type StringBody512 = StringBody<527, 17, 512>;\npub type StringBody1024 = StringBody<1054, 34, 1024>;\npub type StringBody2048 = StringBody<2077, 67, 2048>;\npub type StringBody4096 = StringBody<4123, 133, 4096>;\npub type StringBody8192 = StringBody<8215, 265, 8192>;\npub type StringBody16384 = StringBody<16399, 529, 16384>;\n\npub type SubString32 = SubString<62, 1, 32>;\npub type SubString64 = SubString<93, 2, 64>;\npub type SubString128 = SubString<155, 4, 128>;\npub type SubString256 = SubString<279, 8, 256>;\npub type SubString512 = SubString<527, 16, 512>;\npub type SubString1024 = SubString<1054, 33, 1024>;\n\npub trait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field,\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    pub fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes,\n            \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes,\n            \"SubString::concat, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    pub fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes,\n            \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes,\n            \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx as u32]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field,\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    pub fn substring_match<NeedleSubString>(self, substring: NeedleSubString) -> (bool, u32)\n    where\n        NeedleSubString: SubStringTrait,\n    {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text\n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len(),\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length,\n            \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\",\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks =\n            lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk =\n                num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes =\n                num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n        when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n        a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n        Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n        The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n        If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk =\n            self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field =\n                starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n            NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let substring_idx = (predicate as Field) * lhs_index;\n            let byte_from_substring = substring.get(substring_idx) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/\n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field\n            * (final_needle_chunk - initial_needle_chunk)\n            + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field,\n        );\n        (true, position)\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for StringBody<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n///\n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(\n    body: [u8; MaxPaddedBytes],\n) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text =\n        \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n\n#[test]\nfn test_substring_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_string_body_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn regression_20() {\n    let haystack: [u8; 128] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x92, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x6e, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n\n    let needle: [u8; 32] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let needle_len: u32 = 0x20;\n    let id_haystack: StringBody128 = StringBody::new(haystack, 128);\n    let pk_needle: SubString32 = SubString::new(needle, needle_len);\n    let (result, _): (bool, u32) = id_haystack.substring_match(pk_needle);\n    assert(result);\n}\n","path":"/root/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/lib.nr"},"137":{"source":"pub unconstrained fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32,\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt`\n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size::<32>();\n\n        predicate\n    }\n}\n\npub struct DebugRandomEngine {\n    pub seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = std::hash::blake3(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    pub unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n","path":"/root/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/utils.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","extract_claim_unconstrained","__boundary_check","__validate_decoded","search","get_lt_predicate_f","directive_integer_quotient","directive_invert","directive_to_radix"]}